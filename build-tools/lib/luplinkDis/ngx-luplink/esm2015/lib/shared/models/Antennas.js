export const AntennasUtilsFunctions = {
    yagiGainComputation: function (params) {
        /**
         * AMSAT uses a LUT for this computation.
         * There seems to exist Python library that could handle these calculations.
         * For now, we're interpolating the data used in AMSAT
         * This function could also call API for complex calculations
         */
        console.warn('Yagi Gain Computation - not finished', params);
        const length = params.boomLength.value;
        return Math.round(12.316 * Math.pow(length, 0.2665) * 100) / 100;
    },
    yagiOptimumElements: function (params) {
        console.warn('Yagi Beamwidth Computation - not finished', params);
        const length = params.boomLength.value;
        return Math.round((2.632 * Math.pow(length, 0.2665) + 3.149) * 100) / 100;
    },
    yagiBeamwidthComputation: function (params) {
        console.warn('Yagi Beamwidth Computation - not finished', params);
        const length = params.boomLength.value;
        return Math.round(Math.sqrt(40000 / (Math.pow(10, (this.yagiGainComputation(params) / 10)))) * 100) / 100;
    },
};
export class Antennas {
}
Antennas.genericAntenna = {
    // componentType: "antenna",
    componentId: '',
    params: [{
            id: 'antMaxGain',
            desc: 'Max Gain',
            units: ['dBi'],
            // dimension:"iso_gain",
            default: 14.0,
        },
        {
            id: 'antBeamWidth',
            desc: 'Beamwidth',
            units: ['Â°', 'rad'],
            // dimension:"angle",
            default: 35.0,
        },
    ],
};
Antennas.yagiAntenna = {
    // componentType: "antenna",
    componentId: 'yagiAntenna',
    componentName: 'Yagi',
    image: 'assets/antennas/yagi.jpg',
    gainCalculation: 'yagiGainComputation',
    params: [
        {
            id: 'boomLength',
            desc: 'Boom Length',
            units: ['m', 'cm'],
            // dimension: "length",
            default: 0.4,
        },
        {
            id: 'elements',
            desc: 'Number of elements',
            units: ['m', 'cm'],
            // dimension: "length",
            default: 0.4,
        },
    ],
};
Antennas.helixAntenna = {
    // componentType: "antenna",
    componentId: 'helixAntenna',
    componentName: 'Helicoidal',
    image: 'assets/antennas/helix.jpg',
    params: [
        {
            id: 'turns',
            desc: 'Turns',
            units: [],
            // dimension: "adimensional",
            default: 10,
        },
        {
            id: 'turnSpacing',
            desc: 'Turn Spacing',
            units: ['m', 'cm'],
            // dimension: "length",
            default: 0.25,
        },
        {
            id: 'circumference',
            desc: 'Circumference',
            units: ['m', 'cm'],
            // dimension: "length",
            default: 1,
        },
    ],
};
//# sourceMappingURL=data:application/json;base64,